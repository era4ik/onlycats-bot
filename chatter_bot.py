import logging
import os
import json
from threading import Thread

import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)
from flask import Flask

# -------------------------------
# Flask Web Server –¥–ª—è Render
# -------------------------------
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# -------------------------------
# Telegram Bot & Google Sheets
# -------------------------------

BOT_TOKEN = "8187567616:AAG_1VuKg5W_fQgAfZHOSMDxxHTzr105Das"
CHANNEL_ID = "-1002756706595"
ADMIN_ID = 7085368976  # <-- —Ç–≤–æ–π Telegram ID

SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.getenv("GOOGLE_CREDS")
if not creds_json:
    raise Exception("‚ùå GOOGLE_CREDS –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

creds_dict = json.loads(creds_json)
CREDS = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, SCOPE)
client = gspread.authorize(CREDS)
sheet = client.open("Onlycats Applications").sheet1

# Logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# States
(Q1, Q2, Q3, Q4, Q5, Q6, Q7, Q8, Q9, Q10, Q11, Q12) = range(12)

# -------------------------------
# Conversation Handlers
# -------------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    return Q1

async def q1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç?")
    return Q2

async def q2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = update.message.text
    await update.message.reply_text("–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –ø—Ä–æ–∂–∏–≤–∞–µ—à—å?")
    return Q3

async def q3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["country"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç –Ω–∞ OnlyFans?")
    return Q4

async def q4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["of_experience"] = update.message.text
    keyboard = [["–£—Ç—Ä–æ (08‚Äì16)", "–í–µ—á–µ—Ä (16‚Äì00)", "–ù–æ—á—å (00‚Äì08)"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í –∫–∞–∫—É—é —Å–º–µ–Ω—É —Ä–∞–±–æ—Ç–∞–µ—à—å?", reply_markup=reply_markup)
    return Q5

async def q5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["shift"] = update.message.text
    await update.message.reply_text(
        "–ì–¥–µ —Ä–∞–±–æ—Ç–∞–ª(–∞), —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏, –∫–∞–∫–∏–µ –±—ã–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–æ—á–µ–º—É —É—à—ë–ª(—É—à–ª–∞)?",
        reply_markup=ReplyKeyboardRemove()
    )
    return Q6

async def q6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["previous"] = update.message.text
    keyboard = [["A1", "A2", "B1"], ["B2", "C1", "C2"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞?", reply_markup=reply_markup)
    return Q7

async def q7(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["english"] = update.message.text
    await update.message.reply_text(
        "–§–∞–Ω–∞—Ç –ø–∏—à–µ—Ç: ‚ÄúI can find free stuff online. Why should I pay you?‚Äù ‚Äî —Ç–≤–æ–π –æ—Ç–≤–µ—Ç?",
        reply_markup=ReplyKeyboardRemove()
    )
    return Q8

async def q8(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["q8"] = update.message.text
    await update.message.reply_text("–§–∞–Ω–∞—Ç –ø–∏—à–µ—Ç: ‚ÄúBabe, I can't play right now, I'm at work!‚Äù ‚Äî —Ç–≤–æ–π –æ—Ç–≤–µ—Ç?")
    return Q9

async def q9(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["q9"] = update.message.text
    await update.message.reply_text("–§–∞–Ω–∞—Ç –ø–∏—à–µ—Ç: ‚Äú$40 –∑–∞ –≤–∏–¥–µ–æ ‚Äî –¥–æ—Ä–æ–≥–æ.‚Äù ‚Äî —Ç–≤–æ–π –æ—Ç–≤–µ—Ç?")
    return Q10

async def q10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["q10"] = update.message.text
    await update.message.reply_text("–§–∞–Ω–∞—Ç –ø–∏—à–µ—Ç: ‚ÄúI don‚Äôt have much money, but I‚Äôm so horny rn.‚Äù ‚Äî —Ç–≤–æ–π –æ—Ç–≤–µ—Ç?")
    return Q11

async def q11(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["q11"] = update.message.text
    await update.message.reply_text(
        "–ù–∞ –º–æ–¥–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–æ–≤—ã–π —Ñ–∞–Ω. –ß—Ç–æ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å –µ–º—É –≤ –ø–µ—Ä–≤—ã–µ –º–∏–Ω—É—Ç—ã? "
        "–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –∏ –∫–∞–∫–∏–µ —à–∞–≥–∏ –ø—Ä–µ–¥–ø—Ä–∏–º–µ—à—å, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –∂–∏–≤–æ–π –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–¥–≤–µ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∂–∞–º?"
    )
    return Q12

async def q12(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["q12"] = update.message.text
    username = update.message.from_user.username or "(no username)"
    user_id = update.message.from_user.id

    result_message = (
        f"üßæ –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n"
        f"üë§ Username: @{username}\n"
        f"üÜî ID: {user_id}\n"
        f"üìõ –ò–º—è: {context.user_data['name']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {context.user_data['country']}\n"
        f"üìà –û–ø—ã—Ç –Ω–∞ OF: {context.user_data['of_experience']}\n"
        f"üïê –°–º–µ–Ω–∞: {context.user_data['shift']}\n"
        f"üíº –ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ–ø—ã—Ç: {context.user_data['previous']}\n"
        f"üìö –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: {context.user_data['english']}\n\n"
        f"‚ùì Q1: {context.user_data['q8']}\n"
        f"‚ùì Q2: {context.user_data['q9']}\n"
        f"‚ùì Q3: {context.user_data['q10']}\n"
        f"‚ùì Q4: {context.user_data['q11']}\n"
        f"‚ùì Q5: {context.user_data['q12']}"
    )

    await context.bot.send_message(chat_id=CHANNEL_ID, text=result_message)
    sheet.append_row([
        username, str(user_id),
        context.user_data["name"],
        context.user_data["age"],
        context.user_data["country"],
        context.user_data["of_experience"],
        context.user_data["shift"],
        context.user_data["previous"],
        context.user_data["english"],
        context.user_data["q8"],
        context.user_data["q9"],
        context.user_data["q10"],
        context.user_data["q11"],
        context.user_data["q12"]
    ])
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É, –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –†–∞—Å—Å—ã–ª–∫–∞
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /broadcast —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    text_to_send = " ".join(context.args)
    users = sheet.col_values(2)
    sent, failed = 0, 0
    for user_id in users[1:]:
        try:
            await context.bot.send_message(chat_id=int(user_id), text=text_to_send)
            sent += 1
        except Exception as e:
            failed += 1
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")

    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–û—à–∏–±–æ–∫: {failed}")

# -------------------------------
# Main
# -------------------------------
def run_bot():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")

    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            Q1: [MessageHandler(filters.TEXT & ~filters.COMMAND, q1)],
            Q2: [MessageHandler(filters.TEXT & ~filters.COMMAND, q2)],
            Q3: [MessageHandler(filters.TEXT & ~filters.COMMAND, q3)],
            Q4: [MessageHandler(filters.TEXT & ~filters.COMMAND, q4)],
            Q5: [MessageHandler(filters.TEXT & ~filters.COMMAND, q5)],
            Q6: [MessageHandler(filters.TEXT & ~filters.COMMAND, q6)],
            Q7: [MessageHandler(filters.TEXT & ~filters.COMMAND, q7)],
            Q8: [MessageHandler(filters.TEXT & ~filters.COMMAND, q8)],
            Q9: [MessageHandler(filters.TEXT & ~filters.COMMAND, q9)],
            Q10: [MessageHandler(filters.TEXT & ~filters.COMMAND, q10)],
            Q11: [MessageHandler(filters.TEXT & ~filters.COMMAND, q11)],
            Q12: [MessageHandler(filters.TEXT & ~filters.COMMAND, q12)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.run_polling()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    from threading import Thread
    flask_thread = Thread(target=run_flask)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    run_bot()
